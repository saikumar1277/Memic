// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model resume {
  id        String   @id @default(uuid())
  name      String?
  link      String?
  content   String?
  is_default Boolean  @default(false)
  pinned    Boolean  @default(false)
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  deleted_at DateTime?
  user_id    String
  user      User     @relation(fields: [user_id], references: [id])

  @@index([user_id])
  @@index([id])
}

model User {
  id        String   @id
  email     String   @unique
  name      String?
  created_at DateTime @default(now())
  customer_id String?
  subscription_status String? // active, inactive, canceled, etc.
  subscription_id String?
  request_limit Int @default(30)
  no_limit Boolean @default(true)
  // Add any other fields you want
  resumes   resume[]
  threads   thread[]
  messages  message[]
  subscriptions subscription[]
  orders    order[]
  webhookEvents webhookEvent[]

  @@index([email])
  @@index([id])
  @@index([customer_id])
}

model thread {
  id        String   @id @default(uuid())
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  deleted_at DateTime?
  title      String?
  user_id    String
  user      User     @relation(fields: [user_id], references: [id])
  messages  message[]
  last_accessed_at DateTime @default(now())

  @@index([user_id])
  @@index([id])
  @@index([last_accessed_at])
}

model message {
  id        String   @id
  role      String   // "user" | "assistant"
  content   String   @db.Text
  newEditorHTML String? @db.Text
  diffEditorHTML String? @db.Text
  events    Json?    // Array of event objects
  attachPartOfHTML String[]
  isStreaming Boolean @default(false)
  threadId   String?
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  deleted_at DateTime?
  user_id    String
  user      User     @relation(fields: [user_id], references: [id])
  thread     thread?  @relation(fields: [threadId], references: [id])

  @@index([user_id])
  @@index([threadId])
  @@index([id])
}

model subscription {
  id               String   @id @default(uuid())
  polar_subscription_id String @unique
  polar_customer_id String
  user_id          String
  status           String   // active, canceled, incomplete, etc.
  product_id       String?
  product_name     String?
  price_amount     Int?     // in cents
  price_currency   String?
  current_period_start DateTime?
  current_period_end   DateTime?
  cancel_at_period_end Boolean @default(false)
  canceled_at      DateTime?
  created_at       DateTime @default(now())
  updated_at       DateTime @updatedAt
  
  user User @relation(fields: [user_id], references: [id], onDelete: Cascade)
  orders order[]

  @@index([user_id])
  @@index([polar_subscription_id])
  @@index([polar_customer_id])
  @@index([status])
}

model order {
  id            String   @id @default(uuid())
  polar_order_id String  @unique
  polar_customer_id String
  subscription_id String?
  user_id       String
  status        String   // pending, paid, refunded, etc.
  amount        Int      // in cents
  currency      String
  billing_reason String? // subscription_create, subscription_cycle, purchase, etc.
  created_at    DateTime @default(now())
  updated_at    DateTime @updatedAt
  
  user User @relation(fields: [user_id], references: [id], onDelete: Cascade)
  subscription subscription? @relation(fields: [subscription_id], references: [id], onDelete: SetNull)

  @@index([user_id])
  @@index([polar_order_id])
  @@index([subscription_id])
  @@index([status])
  @@index([billing_reason])
}

model webhookEvent {
  id         String   @id @default(uuid())
  event_type String   // subscription.created, subscription.updated, etc.
  polar_event_id String? @unique
  user_id    String?
  data       Json     // The full webhook payload
  processed  Boolean  @default(false)
  error_message String?
  retry_count Int     @default(0)
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  
  user User? @relation(fields: [user_id], references: [id], onDelete: SetNull)

  @@index([user_id])
  @@index([event_type])
  @@index([processed])
  @@index([created_at])
  @@map("webhook_event")
}